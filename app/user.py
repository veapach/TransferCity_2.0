import os.path
from decimal import Decimal, InvalidOperation

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import CommandStart

from app.database.models import engine
from app.database.requests import set_user, perform_transfer, get_user_by_id, get_user_by_username, get_top_10
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import app.keyboards as kb

router = Router()

balance_photo = FSInputFile(os.path.join(os.path.dirname(__file__), '../img/balance.jpg'))
rating_photo = FSInputFile(os.path.join(os.path.dirname(__file__), '../img/rating.jpg'))

class Transfer(StatesGroup):
    receiver_id = State()
    amount = State()
    confirm = State()

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user = await set_user(message.from_user.id, message.from_user.username)
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{user.username}</b>!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>TransferCity</b> ‚Äì –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å points –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º, "
        "–ø–æ–≤—ã—à–∞—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. üèÖ\n\n"
        "<b>üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "<b>üîπ –ü–µ—Ä–µ–≤–æ–¥ points –¥—Ä—É–∑—å—è–º –∏ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º</b>\n"
        "<b>üîπ –ü–æ–¥–Ω—è—Ç–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ</b>\n"
        "<b>üîπ –°–∫–æ—Ä–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –º–∞–≥–∞–∑–∏–Ω points –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏</b>\n\n"
        "–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=kb.main)
    await state.clear()

@router.callback_query(F.data == 'cancel')
async def cancel(callback: CallbackQuery, state: FSMContext):
    await callback.answer(cache_time=1)
    await state.clear()
    await callback.message.answer('üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=kb.main)

@router.message(F.text == 'üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ points')
async def transfer_points(message: Message, state: FSMContext):
    await state.set_state(Transfer.receiver_id)
    await message.answer('‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ <b>username</b>(–±–µ–∑ @) –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏', reply_markup=kb.cancel)

@router.message(Transfer.receiver_id)
async def get_receiver_id(message: Message, state: FSMContext):
    receiver = await get_user_by_username(message.text)
    user = await get_user_by_username(message.from_user.username)
    if receiver:
        if message.text == message.from_user.username:
            await state.set_state(Transfer.receiver_id)
            await message.answer(f'‚ùå <b>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ!</b>\n–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π —é–∑–µ—Ä–Ω–µ–π–º', reply_markup=kb.cancel)
        else:
            await state.update_data(receiver_id=receiver.id)
            await state.set_state(Transfer.amount)
            await message.answer(f'üíº –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{receiver.username}\nüí∞ –°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?\n'
                                 f'<code>(–º–∏–Ω. - 10, –º–∞–∫—Å. - 100)</code>\n\n'
                                 f'ü™ô –ö–æ–º–∏—Å—Å–∏—è - <b>5%</b>\n\n–í–∞—à –±–∞–ª–∞–Ω—Å - <b>{user.balance:.2f}</b> –ø–æ–∏–Ω—Ç–æ–≤', reply_markup=kb.cancel)
    else:
        await message.answer(f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ª–∏–±–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—à–µ–π –∏–≥—Ä–µ!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                             reply_markup=kb.cancel)
        await state.set_state(Transfer.receiver_id)

@router.message(Transfer.amount)
async def get_transfer_amount(message: Message, state: FSMContext):
    data = await state.get_data()
    user = await get_user_by_username(message.from_user.username)
    receiver = await get_user_by_id(data['receiver_id'])
    user_input = message.text.replace(',', '.').strip()

    try:
        amount = Decimal(user_input).quantize(Decimal('0.01'))
        if 10 <= amount <= 100 and amount <= user.balance:
            await state.update_data(amount=amount)
            await state.set_state(Transfer.confirm)
            await message.answer(f'‚úÖ –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{receiver.username} <b>{amount}</b> points\n'
                                 f'üí∏ –ò—Ç–æ–≥–æ —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—É–¥–µ—Ç —Å–Ω—è—Ç–æ <b>{(amount + (amount * Decimal("0.05"))):.2f}</b> —Å –∫–æ–º–∏—Å—Å–∏–µ–π 5%\n'
                                 f'‚≠ê –ó–∞ –ø–µ—Ä–µ–≤–æ–¥ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>{int(amount/10)}</b> —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö –æ—á–∫–æ–≤\n\n'
                                 f'<i>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?</i>', reply_markup=kb.transfer_accept)
        else:
            await message.answer('üõë –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n<code>(–º–∏–Ω. - 10, –º–∞–∫—Å. - 100)</code>\n\n–ò–ª–∏ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞'
                                 f'\n<code>(–í–∞—à –±–∞–ª–∞–Ω—Å - {user.balance})</code>\n\n'
                                 '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—É–º–º—É', reply_markup=kb.cancel)
            await state.set_state(Transfer.amount)
    except InvalidOperation:
        await message.answer('üõë –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ', reply_markup=kb.cancel)
        await state.set_state(Transfer.amount)

@router.callback_query(F.data == 'transfer_accepted')
async def transfer_accepted(callback: CallbackQuery, state: FSMContext):
    await callback.answer(cache_time=1)
    data = await state.get_data()
    sender = await get_user_by_username(callback.from_user.username)
    receiver = await get_user_by_id(data['receiver_id'])

    if not sender or not receiver:
        await callback.message.answer('üõë –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        await state.clear()
        return

    amount = data['amount']
    commission = amount * Decimal('0.05')
    total_deduction = amount + commission
    if sender.balance < total_deduction:
        await callback.message.answer('üõë –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏')
        await state.clear()
        return

    success = await perform_transfer(sender.id, receiver.id, amount, commission)
    if success:
        await callback.message.answer(
            f'–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!‚úÖ\n\n'
            f'üí∏ –í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ <b>{amount}</b> points –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{receiver.username} üí∏'
            f'\n–ö–æ–º–∏—Å—Å–∏—è: <i>{commission:.2f}</i> points'
            f'\n–í–∞—à –±–∞–ª–∞–Ω—Å - <b>{(sender.balance - total_deduction):.2f}</b>', reply_markup=kb.main
        )
        await callback.bot.send_message(
            chat_id=receiver.tg_id,
            text=(
                f'üéâ –í–∞–º –ø–µ—Ä–µ–≤–µ–ª–∏ <b>{amount - commission:.2f}</b> points –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{sender.username}'
                f'\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å - <b>{receiver.balance + amount:.2f}</b>'
            )
        )
    else:
        await callback.message.answer('üõë –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')

    await state.clear()

@router.callback_query(F.data == 'transfer_declined')
async def transfer_declined(callback: CallbackQuery, state: FSMContext):
    await callback.answer(cache_time=1)
    await state.clear()
    await callback.message.answer('–û–ø–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')

@router.message(F.text == 'üí∞ –ë–∞–ª–∞–Ω—Å')
async def get_balance(message: Message):
    user = await get_user_by_username(message.from_user.username)
    if user:
        await message.answer_photo(photo=balance_photo, caption=f'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{user.balance:.2f}</b> –ø–æ–∏–Ω—Ç–æ–≤')
    else:
        await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π –∏–≥—Ä–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')

@router.message(F.text == 'üèÖ –†–µ–π—Ç–∏–Ω–≥')
async def get_global_rank(message: Message):
    user = await get_user_by_username(message.from_user.username)
    if user:
        await message.answer_photo(photo=rating_photo, caption=f'ü•á –í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ - <b>{user.global_rank}</b>\n'
                             f'‚≠ê –£ –≤–∞—Å <b>{user.rating_points}</b> —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö –æ—á–∫–æ–≤\n\n'
                             f'üìà –ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ points –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ —Ä–µ–π—Ç–∏–Ω–≥–∞!')
    else:
        await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π –∏–≥—Ä–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')

@router.message(F.text == 'üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π')
async def contact_with_admin(message: Message):
    await message.answer('–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ - @veapach')

@router.message(F.text == 'üîù –¢–æ–ø-10')
async def result_top_10(message: Message):
    top_users = await get_top_10()
    if top_users:
        top_list = '\n'.join(
            [f'{rank + 1}. @{user.username} - {user.rating_points} –æ—á–∫–æ–≤' for rank, user in enumerate(top_users)]
        )
        await message.answer('üèÜ <b>–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:</b>\n' + top_list)
    else:
        await message.answer("‚ùå –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")